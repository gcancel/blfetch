// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: steam_games.sql

package database

import (
	"context"
)

const getCountGames = `-- name: GetCountGames :one
SELECT COUNT(*) FROM steam_games
`

func (q *Queries) GetCountGames(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCountGames)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const insertGame = `-- name: InsertGame :one
INSERT INTO steam_games(appid, name, playtime_forever, img_icon_url, playtime_windows_forever, playtime_mac_forever, playtime_linux_forever, playtime_deck_forever, rtime_last_played, playtime_disconnected, playtime_2weeks)
VALUES(
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?
)RETURNING appid, name, playtime_forever, img_icon_url, playtime_windows_forever, playtime_mac_forever, playtime_linux_forever, playtime_deck_forever, rtime_last_played, playtime_disconnected, playtime_2weeks
`

type InsertGameParams struct {
	Appid                  int64
	Name                   string
	PlaytimeForever        int64
	ImgIconUrl             string
	PlaytimeWindowsForever int64
	PlaytimeMacForever     int64
	PlaytimeLinuxForever   int64
	PlaytimeDeckForever    int64
	RtimeLastPlayed        int64
	PlaytimeDisconnected   int64
	Playtime2weeks         int64
}

func (q *Queries) InsertGame(ctx context.Context, arg InsertGameParams) (SteamGame, error) {
	row := q.db.QueryRowContext(ctx, insertGame,
		arg.Appid,
		arg.Name,
		arg.PlaytimeForever,
		arg.ImgIconUrl,
		arg.PlaytimeWindowsForever,
		arg.PlaytimeMacForever,
		arg.PlaytimeLinuxForever,
		arg.PlaytimeDeckForever,
		arg.RtimeLastPlayed,
		arg.PlaytimeDisconnected,
		arg.Playtime2weeks,
	)
	var i SteamGame
	err := row.Scan(
		&i.Appid,
		&i.Name,
		&i.PlaytimeForever,
		&i.ImgIconUrl,
		&i.PlaytimeWindowsForever,
		&i.PlaytimeMacForever,
		&i.PlaytimeLinuxForever,
		&i.PlaytimeDeckForever,
		&i.RtimeLastPlayed,
		&i.PlaytimeDisconnected,
		&i.Playtime2weeks,
	)
	return i, err
}
